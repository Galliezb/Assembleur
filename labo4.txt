;* Projet : Labo XXX *
;************************************************************************
;* Nom de fichier: Labo XXX *
;* Date: XX-XX-XXXX *
;* *
;* Auteur: YY *
;* Haute Ecole Louvain en Hainaut *
;************************************************************************
;* Fichiers nécessaires: aucun *
;************************************************************************
;* Notes: *
;************************************************************************
    list p=16F887, f=INHX8M ; directive pour definir le processeur
    list c=90, n=60 ; directives pour le listing
    #include <p16F887.inc> ; incorporation variables spécifiques
    errorlevel -302 ; pas d'avertissements de bank
    errorlevel -305 ; pas d'avertissements de fdest








    __CONFIG _CONFIG1, _LVP_OFF & _WDT_OFF & _INTOSCIO
    __CONFIG _CONFIG2, _IESO_OFF & _FCMEN_OFF








;*************************************************************************
;* Définitions *
;*************************************************************************
#DEFINE AD0 b'01111101' ; configuration du PORTA afficheur digital sur 0
#DEFINE AD1 b'00000101' ; configuration du PORTA afficheur digital sur 1    
#DEFINE AD2 b'01101011' ; configuration du PORTA afficheur digital sur 2
#DEFINE AD3 b'00101111' ; configuration du PORTA afficheur digital sur 3
#DEFINE AD4 b'00010111' ; configuration du PORTA afficheur digital sur 4
#DEFINE AD5 b'00111110' ; configuration du PORTA afficheur digital sur 5
#DEFINE AD6 b'01111110' ; configuration du PORTA afficheur digital sur 6
#DEFINE AD7 b'00001101' ; configuration du PORTA afficheur digital sur 7
#DEFINE AD8 b'01111111' ; configuration du PORTA afficheur digital sur 8
#DEFINE AD9 b'00111111' ; configuration du PORTA afficheur digital sur 9
#DEFINE ADE b'01011110' ; configuration du PORTA afficheur digital sur E pour erreur
    cblock 0x020
;*************************************************************************
;* Variables *
;*************************************************************************
tempo1,jumper;ici vous pouvez faire vos déclarations de variables
    ; tempo1 = variable pour faire de la temporisation
    ; jumper = définit l'état du jumper
    ;	    0 = jumper configuré sur LED
    ;	    1 = jumper configuré sur affichage digital
    endc








;*************************************************************************
;* Programme principal *
;*************************************************************************
    ORG 0x000 ; vecteur reset


START
    BANKSEL TRISA	; Selectione la banque ou TRISA se trouve
    CLRF TRISA		; mettre le port A en OUTPUT
    BSF TRISC,3	    	; On met le bouton 3 ( celui de gauche ) en INPUT
    BANKSEL PORTA	; select banque pour PORTA
    CLRF PORTA		; assure que les leds sont éteintes
    BANKSEL ANSEL	; select bank 4
    BSF ANSEL,1		; mettre en analog
    MOVLW B'00000001'	; on met 0 dans W
    MOVWF jumper	; init Jumper sur afficheur digital


MAINLOOP
    ;BTFSC jumper	; si jumper = 1, on est en mode affichage DIGITAL
    GOTO TESTFORDIGITAL	; voir TESTFORDIGITAL
    ;BTFSS jumper	; si jumper = 0 on test et affiche pour les LED
    ;GOTO TESTFORLED	; voir TESTFORLED
    GOTO MAINLOOP


; CODE KAHIM
TESTFORLED
    
    GOTO MAINLOOP ;


; CODE BRUNO
TESTFORDIGITAL
    BANKSEL ADCON1 ; selectionne la banque d'ADCON1
    ;****************************
    ;* JUSTIFIER DANS LE RAPPORT*
    ;****************************
    MOVLW B'00000000'	;Left justify
    ;****************************
    ;* JUSTIFIER DANS LE RAPPORT*
    ;****************************
    MOVWF ADCON1	;Vdd and Vss comme tension de référence
    BANKSEL TRISB	; sélectionne le banque du TRISB
    BSF TRISB,1         ;RB1 ( bouton potentiometrique ) en INPUT
    BANKSEL ANSEL       ;On selectionne la banque ANSEL
    BSF ANSEL,0         ;On met RA0 en analog
    ;****************************
    ;* JUSTIFIER DANS LE RAPPORT*
    ;****************************
    BANKSEL ADCON0      ; selectionne la banque d'ADCON0
    MOVLW B'11101001'   ;ADC Frc clock,
    MOVWF ADCON0	;on mets W dans ADCON0
    CALL DELAY		; Tempo d'attente
    ;****************************
    ;* JUSTIFIER DANS LE RAPPORT*
    ;****************************
    BSF ADCON0,1	; On commence la conversion
    BTFSC ADCON0,1	; La convertion est-elle faite ?
    GOTO $-1		; conversion pas fini, on attends
    ;****************************
    ;* JUSTIFIER DANS LE RAPPORT*
    ;****************************
    BANKSEL ADRESH	; on sélectionne la bank ADRESH
    MOVF ADRESH,1	; Envoi l'état analogique du potentiometre dans W
    
    MOVLW B'00000001'	; par défaut, volume = 0
    
    SUBLW B'00011000'	; W - 25 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00000010'	; volume = 1
    
    SUBLW B'00110011'	; W - 50 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00000011'	; volume = 2
    
    SUBLW B'01001010'	; W - 75 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00000100'	; volume = 3
    
    SUBLW B'01100101'	; W - 100 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip 
    MOVLW B'00000101'	; volume = 4
    
    SUBLW B'01111100'	; W - 125 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00000110'	; volume = 5
    
    SUBLW B'10010111'	; W - 150 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00000111'   ; volume = 6
    
    SUBLW B'10101110'	; W - 175 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00001000'	; volume = 7
    
    SUBLW B'11001001'	; W - 200 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00001001'	; volume = 8
    
    SUBLW B'11100000'	; W - 225 => STATUS,0 contiend 0 si W > L et 1 si W <= L
    BTFSS STATUS,0	; si W <= L on skip
    MOVLW B'00001010'	; volume = 9
    
    CALL TABLEDIGITAL	; renvoi la config pour PORTA dans le W    
    GOTO AFFICHER	; go afficher


TABLEDIGITAL
    ADDWF PCL,1		; ajoute W au PCL ( et stock dans PCL )
    RETLW AD0		; W = 0 pour PORTA ( affichage digital )
    RETLW AD1		; W = 1 pour PORTA ( affichage digital )
    RETLW AD2		; W = 2 pour PORTA ( affichage digital )
    RETLW AD3		; W = 3 pour PORTA ( affichage digital )
    RETLW AD4		; W = 4 pour PORTA ( affichage digital )
    RETLW AD5		; W = 5 pour PORTA ( affichage digital )
    RETLW AD6		; W = 6 pour PORTA ( affichage digital )
    RETLW AD7		; W = 7 pour PORTA ( affichage digital )
    RETLW AD8		; W = 8 pour PORTA ( affichage digital )
    RETLW AD9		; W = 9 pour PORTA ( affichage digital )
    
AFFICHER
    BANKSEL PORTA	; selection bank PORTA
    CLRF PORTA		; on s'assure que tout est éteind
    MOVWF PORTA		; on allume ce qu'il faut
    GOTO MAINLOOP	; retour boucle principale
    
DELAY
    MOVLW 0xFF      ; stock 1111 1111 dans le registre de travail
    MOVWF tempo1    ; envoi le W dans la variable tempo1
    DECFSZ tempo1,1 ; décremente tempo1 et stock dans tempo1, skip la ligne suivante si 0
    GOTO $-1        ; reviens à la ligne précédente soit 256*4*200ns = 0.000204800 s soit 0.2ms
    RETURN          ; retourne et continue après le call qui t'as envoyé ici
    
WAITBUTTONSWITCHJUMPER
    MOVLW 0xFF      ; stock 1111 1111 dans le registre de travail
    MOVWF tempo1    ; envoi le W dans la variable tempo1
    DECFSZ tempo1,1 ; décremente tempo1 et stock dans tempo1, skip la ligne suivante si 0
    GOTO $-1        ; reviens à la ligne précédente soit 256*4*200ns = 0.000204800s soit 0.2ms
    RETURN          ; retourne et continue après le call qui t'as envoyé ici
    END             ; FIN PROGRAMME
