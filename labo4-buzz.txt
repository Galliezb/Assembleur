;* Projet : Labo XXX *
;************************************************************************
;* Nom de fichier: Labo XXX *
;* Date: XX-XX-XXXX *
;* *
;* Auteur: YY *
;* Haute Ecole Louvain en Hainaut *
;************************************************************************
;* Fichiers nécessaires: aucun *
;************************************************************************
;* Notes: *
;************************************************************************
    list p=16F887, f=INHX8M ; directive pour definir le processeur
    list c=90, n=60 ; directives pour le listing
    #include <p16F887.inc> ; incorporation variables spécifiques
    errorlevel -302 ; pas d'avertissements de bank
    errorlevel -305 ; pas d'avertissements de fdest

    __CONFIG _CONFIG1, _LVP_OFF & _WDT_OFF & _INTOSCIO
    __CONFIG _CONFIG2, _IESO_OFF & _FCMEN_OFF

;*************************************************************************
;* Définitions *
;*************************************************************************
#DEFINE ETAT1 0x00 ; sans son
#DEFINE ETAT1 0x01 ; son 1 ( dec 1 )
#DEFINE ETAT2 0x05 ; son 4 ( dec 20 )
#DEFINE ETAT3 0x0F ; son 6 ( dec 80 )
#DEFINE ETAT4 0x1F ; son 8 ( dec 256 )

    cblock 0x020
;*************************************************************************
;* Variables *
;*************************************************************************
tempo,delay1,delay2,tmpdelay,numero;ici vous pouvez faire vos déclarations de variables
    ; delay1 = variable pour faire de la temporisation VARIABLE
    ; tempo  = variable pour faire de la temporisation FIXE
    ; tmpdelay = variable à transférer vers delay1
    endc

;*************************************************************************
;* Programme principal *
;*************************************************************************
    ORG 0x000 ; vecteur reset


START
    BANKSEL TRISA	; Selectione la banque ou TRISA se trouve
    CLRF TRISA		; mettre le port A en OUTPUT
    BSF TRISC,0         ; On met le bouton 0 ( celui de droite ) en INPUT
    BSF TRISC,1         ; On met le bouton 1 en INPUT
    BANKSEL ANSEL	; select bank 4
    BSF ANSEL,1		; mettre en analog
    BANKSEL TRISC	; selectionne bank TRISD
    BCF TRISC,5		; 0 = ouptut pour le buffer
    BANKSEL PORTA	; select bank 0
    CLRF PORTA		; eteind les leds
    GOTO LOOP		; go to hein

LOOP
    BSF PORTC,5		  ; Allume le son
    BSF PORTA,0		  ; Allume la led 0 pour vérification
    CALL DELAY		  ; appelle la sous routine delay
    CALL ALLBUTTON
    
    MOVFW delay1
    MOVWF PORTA
    
    BCF PORTC,5		  ; coupe le son
    BCF PORTA,0		  ; etined la led 0 pour vérification
    CALL DELAY		  ; cree un timer de delayrisation
    GOTO LOOP
    
ALLBUTTON
    BTFSC PORTC,0       ; si le bouton 0 est PAS enfoncé, on skip
    GOTO $+6
    MOVLW ETAT1		; envoi 256 dans W
    MOVWF tmpdelay	; envoi W dans
    CALL TEMPO		; wait relache
    BTFSS PORTC,0	; bouton 0 enfoncé
    GOTO $-2		; retour en arrière
    
    BTFSC PORTC,1       ; si le bouton 0 est PAS enfoncé, on skip
    GOTO $+6
    MOVLW ETAT2		; envoi 256 dans W
    MOVWF tmpdelay	; envoi W dans
    CALL TEMPO		; wait relache
    BTFSS PORTC,1	; bouton 0 enfoncé
    GOTO $-2		; retour en arrière
    
    BTFSC PORTC,2       ; si le bouton 0 est PAS enfoncé, on skip 
    GOTO $+6
    MOVLW ETAT3		; envoi 256 dans W
    MOVWF tmpdelay	; envoi W dans
    CALL TEMPO		; wait relache
    BTFSS PORTC,2	; bouton 0 enfoncé
    GOTO $-2		; retour en arrière
    
    BTFSC PORTC,3       ; si le bouton 0 est PAS enfoncé, on skip
    GOTO $+6
    MOVLW ETAT4		; envoi 256 dans W
    MOVWF tmpdelay	; envoi W dans
    CALL TEMPO		; wait relache
    BTFSS PORTC,3	; bouton 0 enfoncé
    GOTO $-2		; retour en arrière
    
    RETURN
    
DELAY
    MOVFW tmpdelay
    MOVWF delay1	; envoi le W dans la variable delay1
    DECFSZ delay1,1	; décremente delay1 et stock dans delay1, skip la ligne suivante si 0
    GOTO $-1		; reviens à la ligne précédente soit 256*4*200ns = 0.000204800 s soit 0.2ms
    RETURN		; retourne et continue après le call qui t'as envoyé ici
TEMPO
    MOVLW 0xFF		; stock 1111 1111 dans le registre de travail
    MOVWF tempo		; envoi le W dans la variable delay1
    DECFSZ tempo,1	; décremente delay1 et stock dans delay1, skip la ligne suivante si 0
    GOTO $-1		; reviens à la ligne précédente soit 256*4*200ns = 0.000204800 s soit 0.2ms
    RETURN		; retourne et continue après le call qui t'as envoyé ici

    END         ; FIN PROGRAMME
